name: Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'  # 当推送带有版本号的 tag（例如 v1.0.0）时触发工作流
      - 'test'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        job:
          - { platform: "amd64", goos: "linux" }
          - { platform: "arm64", goos: "linux" }
          - { platform: "amd64", goos: "windows" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'  # 选择 Go 版本

      - name: Set up npm
        uses: actions/setup-node@v2
        with:
          node-version: '20'


      - name: build rustdesk-api-web
        run: |
          git clone https://github.com/lejianwen/rustdesk-api-web
          cd rustdesk-api-web
          npm install
          npm run build
          mkdir ../resources/admin/ -p
          cp -ar dist/* ../resources/admin/

      - name: tidy
        run: go mod tidy

      - name: swag
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g cmd/apimain.go --output docs/api --instanceName api --exclude http/controller/admin
          swag init -g cmd/apimain.go --output docs/admin --instanceName admin --exclude http/controller/api

      - name: Build for ${{ matrix.job.goos }}-${{ matrix.job.platform }}
        run: |
          mkdir release -p
          cp -ar resources release/
          cp -ar docs release/
          cp -ar conf release/
          mkdir -p release/data
          mkdir -p release/runtime
          if [ "${{ matrix.job.goos }}" = "windows" ]; then
            sudo apt-get install gcc-mingw-w64-x86-64 zip -y
            GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=x86_64-w64-mingw32-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain.exe ./cmd/apimain.go
            zip -r ${{ matrix.job.goos}}-${{ matrix.job.platform }}.zip ./release
          else
            if [ "${{ matrix.job.platform }}" = "arm64" ]; then
                wget https://musl.cc/aarch64-linux-musl-cross.tgz
                tar -xf aarch64-linux-musl-cross.tgz
                export PATH=$PATH:$PWD/aarch64-linux-musl-cross/bin
                GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=aarch64-linux-musl-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain ./cmd/apimain.go
            else
              sudo apt-get install musl musl-dev musl-tools -y
              GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=musl-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain ./cmd/apimain.go
            fi
            tar -czf ${{ matrix.job.goos}}-${{ matrix.job.platform }}.tar.gz ./release
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-api-${{ matrix.job.goos }}-${{ matrix.job.platform }}
          path: |
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.tar.gz
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.zip

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.tar.gz
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker:
    name: Push Docker Image ${{ matrix.job.platform }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { platform: "amd64", goos: "linux",  docker_platform: "linux/amd64" }
          - { platform: "arm64", goos: "linux",  docker_platform: "linux/arm64" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract version from tag
        id: vars
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: rustdesk-api-${{ matrix.job.goos }}-${{ matrix.job.platform }}
          path: ./

      - name: Unzip binaries
        run: |
          mkdir release -p
          tar -xzf rustdesk-api-${{ matrix.job.goos }}-${{ matrix.job.platform }}.tar.gz -C release/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: "."
          file: ./Dockerfile
          platforms: ${{ matrix.job.docker_platform }}
          push: true
          tags: |
            lejianwen/rustdesk-api:latest-${{ matrix.job.platform }}
            lejianwen/rustdesk-api:${{ env.TAG }}-${{ matrix.job.platform }}
  docker-manifest:
    name: Push Docker Manifest
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from tag
        id: vars
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Create and push manifest (:version)
        uses: Noelware/docker-manifest-action@master
        with:
          base-image: lejianwen/rustdesk-api:${{ env.TAG }}
          extra-images: lejianwen/rustdesk-api:${{ env.TAG }}-amd64,lejianwen/rustdesk-api:${{ env.TAG }}-arm64
          push: true

#      - name: Create and push manifest (:latest)
#        uses: Noelware/docker-manifest-action@master
#        with:
#          base-image: lejianwen/rustdesk-api:latest
#          extra-images: lejianwen/rustdesk-api:latest-amd64,lejianwen/rustdesk-api:latest-arm64
#          push: true
